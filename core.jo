(+jojo even? 2 mod 0 eq?)
(+jojo odd? even? not)

(+union List
  <null>
  <cons>)

(+jojo list-length (-> :list -- Int)
  (cond [:list null?] 0
        else [:list .cdr list-length inc]))

(+jojo list-ref (-> :list :index -- Value)
  (cond [:list null?]
        ["- list-ref fail"
         string-write newline
         "  index greater then length of list"
         string-write newline
         error]
        [:index 0 eq?] [:list .car]
        else [:list .cdr :index dec list-ref]))

(+jojo list-append (-> :ante :succ -> List)
  (cond
    [:ante null?] [:succ]
    [:ante cons?] [:ante .cdr :succ list-append
                   :ante .car swap cons]))

(+jojo tail-cons null cons list-append)

(+jojo assert (-> :body -- sexp)
  `(if (@ :body list-spread)
     {}
     {"- (assert) fail" string-write newline
      "  assertion : " string-write
      (quote (@ :body)) sexp-list-write newline}))

(+jojo assert! (-> :body -- sexp)
  `(if (@ :body list-spread)
     {}
     {"- (assert!) fail" string-write newline
      "  assertion : " string-write
      (quote (@ :body)) sexp-list-write newline
      error}))

(+gene w (-> :x --) :x print)

(+disp w (-> :list List --)
  (cond [:list null?] ["()" w]
        [:list cons?] ["(" w :list list-write/loop ")" w]))

(+jojo list-write/loop (-> :list --)
  (cond
    [:list null?] []
    [:list .cdr null?] [:list .car w]
    else [:list .car w space
          :list .cdr list-write/loop]))

(+gene equal? (-> :x :y -- Bool) false)
