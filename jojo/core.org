#+html_head: <link rel="stylesheet" href="css/org-page.css"/>
#+property: tangle core.jo
#+title: core

* [todo-stack]

*** length

*** empty?

*** to-string

*** to-list

*** add

*** sub

*** mul

* Int

  #+begin_src jojo
  (+jojo even? 2 mod 0 eq?)
  (+jojo odd? even? not)
  #+end_src

* List

*** List

    #+begin_src jojo
    (+union List
      <null>
      <cons>)
    #+end_src

*** list-length

    #+begin_src jojo
    (+jojo list-length (-> :list -- Int)
      (cond [:list null?] 0
            else [:list .cdr list-length inc]))
    #+end_src

*** list-ref

    #+begin_src jojo
    (+jojo list-ref (-> :list :index -- Value)
      (cond [:list null?]
            ["- list-ref fail"
             string-print newline
             "  index greater then length of list"
             string-print newline
             error]
            [:index 0 eq?] [:list .car]
            else [:list .cdr :index dec list-ref]))
    #+end_src

*** list-append

    #+begin_src jojo
    (+jojo list-append (-> :ante :succ -> List)
      (cond
        [:ante null?] [:succ]
        [:ante cons?] [:ante .cdr :succ list-append
                       :ante .car swap cons]))
    #+end_src

*** tail-cons

    #+begin_src jojo
    (+jojo tail-cons null cons list-append)
    #+end_src

* about test

*** (assert) & (assert!)

    #+begin_src jojo
    (+jojo assert (-> :body -- sexp)
      `(if [(@ :body list-spread)]
         []
         ["- (assert) fail" string-print newline
          "  assertion : " string-print
          (quote (@ :body)) sexp-list-print newline]))

    (+jojo assert! (-> :body -- sexp)
      `(if [(@ :body list-spread)]
         []
         ["- (assert!) fail" string-print newline
          "  assertion : " string-print
          (quote (@ :body)) sexp-list-print newline
          error]))
    #+end_src

* common gene

*** p

***** p

      #+begin_src jojo
      (+gene p (-> :x) :x default-print)
      #+end_src

***** print

      #+begin_src jojo
      (+jojo print p)
      #+end_src

***** Bool

      #+begin_src jojo
      (+disp p (-> :bool Bool)
        (if :bool
          ["true" p]
          ["false" p]))
      #+end_src

***** List

      #+begin_src jojo
      (+disp p (-> :list List)
        (cond
          [:list null?] []
          [:list.cdr null?] [:list.car p]
          else [:list.car p space
                :list.cdr p]))
      #+end_src

***** Vect

      #+begin_src jojo
      (+disp p (-> Vect)
        vect->list p)
      #+end_src

***** Tuple

      #+begin_src jojo
      (+disp p (-> Tuple)
        tuple->vect p)
      #+end_src

***** Set

      #+begin_src jojo
      (+disp p (-> Set)
        set->vect p)
      #+end_src

***** Dict

      #+begin_src jojo
      (+disp p (-> Dict)
        dict->assco-list assco-list-dict-print)

      (+jojo assco-list-dict-print (-> :alist)
        (cond
          [:alist null?] []
          [:alist.cdr null?]
          [:alist.car 0 tuple-ref p " : " p
           :alist.car 1 tuple-ref p]
          else
          [:alist.car 0 tuple-ref p " : " p
           :alist.car 1 tuple-ref p ", " p
           :alist.cdr assco-list-dict-print]))
      #+end_src

*** repr

***** repr

      #+begin_src jojo
      (+gene repr (-> :x -- String) :x default-repr)
      #+end_src

***** Bool

      #+begin_src jojo
      (+disp repr (-> :bool Bool -- String)
        (if :bool
          "true"
          "false"))
      #+end_src

***** String

      #+begin_src jojo
      (+disp repr (-> String -- String)
        doublequote string-append
        doublequote swap string-append)
      #+end_src

***** List

      #+begin_src jojo
      (+disp repr (-> :list List -- String)
        (cond
          [:list null?] ["(list)"]
          [:list cons?] [:list list-inner-repr
                         "(list " swap string-append
                         ")" string-append]))

      (+jojo list-inner-repr (-> :list List -- String)
        (cond
          [:list null?] [""]
          [:list.cdr null?] [:list.car repr]
          else [:list.car repr " " string-append
                :list.cdr list-inner-repr string-append]))
      #+end_src

***** Vect

      #+begin_src jojo
      (+disp repr (-> :vect Vect -- String)
        (cond
          [:vect vect-empty?] ["(vect)"]
          else [:vect vect-inner-repr
                "(vect " swap string-append
                ")" string-append]))

      (+jojo vect-inner-repr
        vect->list list-inner-repr)
      #+end_src

***** Tuple

      #+begin_src jojo
      (+disp repr (-> :tuple Tuple -- String)
        (cond
          [:tuple tuple-empty?] ["(*)"]
          else [:tuple tuple-inner-repr
                "(* " swap string-append
                ")" string-append]))

      (+jojo tuple-inner-repr
        tuple->vect vect-inner-repr)
      #+end_src

***** Set

      #+begin_src jojo
      (+disp repr (-> :set Set -- String)
        (cond
          [:set set-empty?] ["(set)"]
          else [:set set-inner-repr
                "(set " swap string-append
                ")" string-append]))

      (+jojo set-inner-repr
        set->vect vect-inner-repr)
      #+end_src

***** Dict

      #+begin_src jojo
      (+disp repr (-> Dict -- String)
        dict->assco-list assco-list-dict-repr)

      (+jojo assco-list-dict-repr (-> :alist -- String)
        (cond
          [:alist null?] ["(dict)"]
          [:alist cons?] [:alist assco-list-dict-inner-repr
                          "(dict " swap string-append
                          ")" string-append]))

      (+jojo assco-list-dict-inner-repr (-> :alist -- String)
        (cond
          [:alist null?] [""]
          [:alist.cdr null?]
          [:alist.car 0 tuple-ref repr " " string-append
           :alist.car 1 tuple-ref repr string-append]
          else
          [:alist.car 0 tuple-ref repr " " string-append
           :alist.car 1 tuple-ref repr ", " string-append string-append
           :alist.cdr assco-list-dict-inner-repr string-append]))
      #+end_src

*** w

***** w

      #+begin_src jojo
      (+gene w (-> :x) :x repr p)
      #+end_src

*** >< length

*** >< empty?

* converting gene

*** >< to-string

*** >< to-list

* algebric gene

*** >< add

*** >< sub

*** >< mul

* combinator

*** times

    #+begin_src jojo
    (+jojo times (-> :fun :n)
      (cond [:n 0 lteq?] []
            else [:fun apply
                  :fun :n dec times]))
    #+end_src

* class

*** class-member?

    #+begin_src jojo
    (+jojo class-member? swap value->class swap subclass?)
    #+end_src

* syntax

*** (case)

***** [note]

      #+begin_src jojo
      (note
        (case v
          c1 a1
          c2 a2
          else ad)
        ==>
        (cond
          [(list v) (list c1) case-match?] a1
          [(list v) (list c2) case-match?] a2
          else ad))
      #+end_src

***** (case)

      #+begin_src jojo
      (+jojo case (-> :sexp-list -- Sexp)
        :sexp-list case-syntax-check
        :sexp-list.car :sexp-list.cdr (-> :value :body)
        `(cond (@ :value :body case-spread)))

      (+jojo case-spread (-> :value :body -- spreading to stack)
        (cond
          [:body null?] []
          else [:value :body.car case-spread-one-question :body.cdr.car
                :value :body.cdr.cdr case-spread]))

      (+jojo case-spread-one-question
        (-> :value :case -- question)
        (cond [:case 'else eq?] 'else
              else `[(list (@ :value)) (list (@ :case)) case-match?]))
      #+end_src

***** case-syntax-check

      #+begin_src jojo
      (+jojo case-syntax-check (-> :sexp-list)
        (cond [:sexp-list list-length 1 lteq?]
              ["- (case) syntax error" p nl
               "  length of body of (case) must be greater then 1" p nl
               "  length of body : " p :sexp-list list-length p nl
               "  body : " p :sexp-list sexp-list-print nl
               error]

              [:sexp-list list-length even?]
              ["- (case) syntax error" p nl
               "  length of body of (case) must be odd" p nl
               "  length of body : " p :sexp-list list-length p nl
               "  body : " p :sexp-list sexp-list-print nl
               error]

              else []))
      #+end_src

***** case-match?

      #+begin_src jojo
      (+jojo case-match? (-> :vl :tl -- Bool)
        (cond [:vl list-length :tl list-length eq? not] false
              else [:vl :tl case-match?/loop]))

      (+jojo case-match?/loop (-> :vl :tl -- Bool)
        (cond [:vl null?] true
              [:vl.car :tl.car class-member? not] false
              else [:vl.cdr :tl.cdr case-match?/loop]))
      #+end_src

* equal?

*** equal?

    #+begin_src jojo
    (+gene equal? (-> :x :y -- Bool) :x :y eqv?)
    #+end_src

*** List

    #+begin_src jojo
    (+disp equal? (-> :x List :y List -- Bool)
      (case [:x :y]
        [<null> <null>] true
        [<cons> <cons>]
        (if [:x .car :y .car equal? not]
          false
          [:x .cdr :y .cdr equal?])
        else false))
    #+end_src

* more about List

*** list-any?

    #+begin_src jojo
    (+jojo list-any? (-> :list :pred -> Bool)
      (cond [:list null?] false
            [:list .car :pred apply] true
            else [:list .cdr :pred list-any?]))
    #+end_src

*** list-every?

    #+begin_src jojo
    (+jojo list-every? (-> :list :pred -> Bool)
      (cond [:list null?] true
            [:list .car :pred apply not] false
            else [:list .cdr :pred list-every?]))
    #+end_src

*** list-ante -- antecedent

    #+begin_src jojo
    (+jojo list-ante (-> :list :pred -- ante)
      (cond [:list null?] null
            [:list .car :pred apply] null
            else [:list .car
                  :list .cdr :pred list-ante
                  cons]))
    #+end_src

*** list-succ -- succedent

    #+begin_src jojo
    (+jojo list-succ (-> :list :pred -- succ)
      (cond [:list null?] null
            [:list .car :pred apply] :list
            else [:list .cdr :pred list-succ]))
    #+end_src

*** list-split

    #+begin_src jojo
    (+jojo list-split (-> :list :pred -- ante succ)
      (cond [:list null?] [null null]
            [:list .car :pred apply] [null :list]
            else [:list .car
                  :list .cdr :pred list-split
                  :succ! cons :succ]))
    #+end_src

*** list-map

    #+begin_src jojo
    (+jojo list-map (-> :list :fun -- List)
      (case :list
        <null> null
        <cons> [:list .car :fun apply :list .cdr :fun list-map cons]))
    #+end_src

*** list-for-each

    #+begin_src jojo
    (+jojo list-for-each (-> :list :fun)
      (case :list
        <null> []
        <cons> [:list .car :fun apply :list .cdr :fun list-for-each]))
    #+end_src

*** list-filter

    #+begin_src jojo
    (+jojo list-filter (-> :list :pred -- List)
      (cond [:list null?] null
            [:list .car :pred apply]
            [:list .car :list .cdr :pred list-filter cons]
            else [:list .cdr :pred list-filter]))
    #+end_src

*** list-reverse

    #+begin_src jojo
    (+jojo list-reverse null swap list-reverse-swap-append)

    (+jojo list-reverse-swap-append (-> ante :list -- List)
      (case :list
        <null> []
        <cons> [:list .car swap cons
                :list .cdr
                list-reverse-swap-append]))
    #+end_src

*** list-foldr

    #+begin_src jojo
    (+jojo list-foldr (-> a :list, :b, :a-b->b -- b)
      (case :list
        <null> :b
        <cons> [:list .car
                :list .cdr :b :a-b->b list-foldr
                :a-b->b apply]))
    #+end_src

*** list-foldl

    #+begin_src jojo
    (+jojo list-foldl (-> a :list, :b, :b-a->b -- b)
      (case :list
        <null> :b
        <cons> [:list .cdr :b :b-a->b list-foldl
                :list .car
                :b-a->b apply]))
    #+end_src

*** list-member?

    #+begin_src jojo
    (+jojo list-member? (-> :list :x -- Bool)
      :list {:x equal?} list-any?)
    #+end_src
