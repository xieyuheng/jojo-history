#+html_head: <link rel="stylesheet" href="css/org-page.css"/>
#+property: tangle core.jo
#+title: core

* [todo-stack]

*** (case) call debug

* Int

  #+begin_src jojo
  (+jojo even? 2 mod 0 eq?)
  (+jojo odd? even? not)
  #+end_src

* List

*** List

    #+begin_src jojo
    (+union List
      <null>
      <cons>)
    #+end_src

*** list-length

    #+begin_src jojo
    (+jojo list-length (-> :list -- Int)
      (cond [:list null?] 0
            else [:list .cdr list-length inc]))
    #+end_src

*** list-ref

    #+begin_src jojo
    (+jojo list-ref (-> :list :index -- Value)
      (cond [:list null?]
            ["- list-ref fail"
             string-print newline
             "  index greater then length of list"
             string-print newline
             error]
            [:index 0 eq?] [:list .car]
            else [:list .cdr :index dec list-ref]))
    #+end_src

*** list-append

    #+begin_src jojo
    (+jojo list-append (-> :ante :succ -> List)
      (cond
        [:ante null?] [:succ]
        [:ante cons?] [:ante .cdr :succ list-append
                       :ante .car swap cons]))
    #+end_src

*** tail-cons

    #+begin_src jojo
    (+jojo tail-cons null cons list-append)
    #+end_src

* testing

*** (assert) & (assert!)

    #+begin_src jojo
    (+jojo assert (-> :body -- sexp)
      `(if (@ :body list-spread)
         []
         ["- (assert) fail" string-print newline
          "  assertion : " string-print
          (quote (@ :body)) sexp-list-print newline]))

    (+jojo assert! (-> :body -- sexp)
      `(if (@ :body list-spread)
         []
         ["- (assert!) fail" string-print newline
          "  assertion : " string-print
          (quote (@ :body)) sexp-list-print newline
          error]))
    #+end_src

* p -- gene

*** gene

    #+begin_src jojo
    (+gene p (-> :x --) :x print)
    #+end_src

*** List

    #+begin_src jojo
    (+disp p (-> :list List --)
      (cond [:list null?] ["()" p]
            [:list cons?] ["(" p :list list-print/loop ")" p]))

    (+jojo list-print/loop (-> :list --)
      (cond
        [:list null?] []
        [:list .cdr null?] [:list .car p]
        else [:list .car p space
              :list .cdr list-print/loop]))
    #+end_src

* equal? -- gene

*** gene

    #+begin_src jojo
    (+gene equal? (-> :x :y -- Bool) false)
    #+end_src

* combinator

*** times

    #+begin_src jojo
    (+jojo times (-> :fun :n --)
      (cond [:n 0 lteq?] []
            else [:fun apply
                  :fun :n dec times]))
    #+end_src

* class

*** class-member?

    #+begin_src jojo
    (+jojo class-member? swap value->class swap subclass?)
    #+end_src

* (case)

*** [note]

    #+begin_src jojo
    (note
      (case v
        c1 a1
        c2 a2
        else ad)
      ==>
      (cond
        [(list v) (list c1) case-match?] a1
        [(list v) (list c2) case-match?] a2
        else ad))
    #+end_src

*** (case)

    #+begin_src jojo
    (+jojo case (-> :sexp-list -- Sexp)
      :sexp-list.car :sexp-list.cdr (-> :value :body)
      `(cond (@ :value :body case-spread)))

    (+jojo case-spread (-> :value :body -- spreading to stack)
      (cond
        [:body null?] []
        else [:value :body.car case-spread-one-question :body.cdr.car
              :value :body.cdr.cdr case-spread]))

    (+jojo case-spread-one-question
      (-> :value :case -- question)
      (cond [:value 'else eq?] 'else
            else `[(list (@ :value)) (list (@ :case)) case-match?]))
    #+end_src

*** case-match?

    #+begin_src jojo
    (+jojo case-match? (-> :vl :tl -- Bool)
      (cond [:vl list-length :tl list-length eq? not] false
            else [:vl :tl case-match?/loop]))

    (+jojo case-match?/loop (-> :vl :tl -- Bool)
      (cond [:vl null?] true
            [:vl.car :tl.car class-member? not] false
            else [:vl.cdr :tl.cdr case-match?/loop]))
    #+end_src
