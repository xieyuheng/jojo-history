(+jojo even? 2 mod 0 eq?)
(+jojo odd? even? not)

(+union List
  <null>
  <cons>)

(+jojo list-length (-> :list -- Int)
  (cond [:list null?] 0
        else [:list .cdr list-length inc]))

(+jojo list-ref (-> :list :index -- Value)
  (cond [:list null?]
        ["- list-ref fail"
         string-print newline
         "  index greater then length of list"
         string-print newline
         error]
        [:index 0 eq?] [:list .car]
        else [:list .cdr :index dec list-ref]))

(+jojo list-append (-> :ante :succ -> List)
  (cond
    [:ante null?] [:succ]
    [:ante cons?] [:ante .cdr :succ list-append
                   :ante .car swap cons]))

(+jojo tail-cons null cons list-append)

(+jojo assert (-> :body -- sexp)
  `(if (@ :body list-spread)
     []
     ["- (assert) fail" string-print newline
      "  assertion : " string-print
      (quote (@ :body)) sexp-list-print newline]))

(+jojo assert! (-> :body -- sexp)
  `(if (@ :body list-spread)
     []
     ["- (assert!) fail" string-print newline
      "  assertion : " string-print
      (quote (@ :body)) sexp-list-print newline
      error]))

(+gene p (-> :x --) :x print)

(+disp p (-> :list List --)
  (cond [:list null?] ["()" p]
        [:list cons?] ["(" p :list list-print/loop ")" p]))

(+jojo list-print/loop (-> :list --)
  (cond
    [:list null?] []
    [:list .cdr null?] [:list .car p]
    else [:list .car p space
          :list .cdr list-print/loop]))

(+gene equal? (-> :x :y -- Bool) false)

(+jojo times (-> :fun :n --)
  (cond [:n 0 lteq?] []
        else [:fun apply
              :fun :n dec times]))

(+jojo class-member? swap value->class swap subclass?)

(note
  (case v
    c1 a1
    c2 a2
    else ad)
  ==>
  (cond
    [(list v) (list c1) case-match?] a1
    [(list v) (list c2) case-match?] a2
    else ad))

(+jojo case (-> :sexp-list -- Sexp)
  :sexp-list.car :sexp-list.cdr (-> :value :body)
  `(cond (@ :value :body case-spread)))

(+jojo case-spread (-> :value :body -- spreading to stack)
  (cond
    [:body null?] []
    else [:value :body.car case-spread-one-question :body.cdr.car
          :value :body.cdr.cdr case-spread]))

(+jojo case-spread-one-question
  (-> :value :case -- question)
  (cond [:value 'else eq?] 'else
        else `[(list (@ :value)) (list (@ :case)) case-match?]))

(+jojo case-match? (-> :vl :tl -- Bool)
  (note
    (when [:vl list-length :tl list-length eq? not]
      false))
  (cond [:vl null?] true
        [:vl.car :tl.car class-member? not] false
        else [:vl.cdr :tl.cdr case-match?]))
