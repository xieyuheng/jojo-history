#+property: tangle compiler.py
#+title: compiler

* [note]

  - compile jojo sexp list to module

* import

  #+begin_src python
  from . vm import (
      VM, RP,
      GET, SET,
      JOJO, MSG, CLO,
      APPLY, IFTE,
      NEW,
      CALL,
  )

  from . sexp import (
      null, null_p,
      cons, cons_p,
      list_p,
      car, cdr,
  )

  import types
  import sys
  import importlib
  #+end_src

* [note] syntax

  - top level :
    - (+jojo)
    - (+macro)
    - (+data) ><><><

  - in jojo :
    - (begin)
    - (clo)

    - (quote)
    - (partquote)
    - (@)

    - (if) ><><><
    - (cond) ><><><
    - (case) ><><><

  - key jo :
    - apply
    - ifte
    - new

  - jo pattern :
    - :local
    - :local!
    - .message

* utility

*** get_current_module

    #+begin_src python
    def get_current_module():
        return sys.modules[__name__]
    #+end_src

* compile_module

*** get_jojo_name_list

    #+begin_src python
    def get_jojo_name_list(sexp_list):
        jojo_name_list = []
        for sexp in sexp_list:
            if not cons_p(sexp):
                pass
            elif car(sexp) == '+jojo':
                body = cdr(sexp)
                jojo_name = car(body)
                jojo_name_list.append(jojo_name)
        return jojo_name_list
    #+end_src

*** compile_module

    #+begin_src python
    def compile_module(module_name, sexp_list) -> types.ModuleType:
        module = types.ModuleType(module_name)
        jojo_name_list = get_jojo_name_list(sexp_list)
        setattr(module, 'jojo_name_list', jojo_name_list)
        for sexp in sexp_list:
            if cons_p(sexp):
                keyword = car(sexp)
                fun = top_level_keyword_dict[keyword]
                fun(module, cdr(sexp))
        return module
    #+end_src

*** compile_jojo

    #+begin_src python
    def compile_jojo(module, body) -> JOJO:
        return JOJO(1, 2, add, 3, add)
    #+end_src

*** top_level_keyword_dict

    #+begin_src python
    top_level_keyword_dict = {}
    #+end_src

*** @keyword

    #+begin_src python
    def keyword(name):
        def decorator(fun):
            top_level_keyword_dict[name] = fun
            return fun
        return decorator
    #+end_src

* top level keywords

*** import

    #+begin_src python
    @keyword("import")
    def k_import(module, body):
        module_name = car(body)
        imported_module = importlib.import_module(module_name)
        setattr(get_current_module(), module_name, imported_module)
    #+end_src

*** +jojo

    #+begin_src python
    @keyword("+jojo")
    def plus_jojo(module, body):
        jojo_name = car(body)
        setattr(module, jojo_name, compile_jojo(module, cdr(body)))
    #+end_src

* macro_expend

* built-in

*** stack operation

    #+begin_src python
    def drop(a):
        return ()

    def dup(a):
        return (a, a)

    def over(a, b):
        return (a, b, a)

    def tuck(a, b):
        return (b, a, b)

    def swap(a, b):
        return (b, a)
    #+end_src

*** number

    #+begin_src python
    def add(a, b):
        return a + b
    #+end_src
