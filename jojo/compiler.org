#+property: tangle compiler.py
#+title: compiler

* [todo-stack]

  - convert jojo naming to python naming

  - macro system

* [note]

  - compile jojo sexp list to module

* import

  #+begin_src python
  from . vm import (
      VM, RP,
      GET, SET,
      JOJO, MSG, CLO,
      APPLY, IFTE,
      NEW,
      CALL,
  )

  from . sexp import (
      null, null_p,
      cons, cons_p,
      list_p,
      car, cdr,
  )

  import types
  import sys
  import importlib
  import re
  #+end_src

* [note] syntax

  - top level :
    - (+jojo)
    - (+macro)
    - (+data) ><><><

  - in jojo :
    - (begin)
    - (clo)

    - (quote)
    - (partquote)
    - (@)

    - (if)
    - (cond) ><><><
    - (case) ><><><

  - key jo :
    - apply
    - ifte
    - new

  - jo pattern :
    - :local
    - :local!
    - .message

* utility

*** get_current_module

    #+begin_src python
    def get_current_module():
        return sys.modules[__name__]
    #+end_src

*** list_to_stack

    #+begin_src python
    def list_to_stack(l):
        stack = []
        while not null_p(l):
            stack.append(car(l))
            l = cdr(l)
        return stack
    #+end_src

* compile_module

*** get_jojo_name_list

    #+begin_src python
    def get_jojo_name_list(sexp_list):
        jojo_name_list = []
        for sexp in sexp_list:
            if not cons_p(sexp):
                pass
            elif car(sexp) == '+jojo':
                body = cdr(sexp)
                jojo_name = car(body)
                jojo_name_list.append(jojo_name)
        return jojo_name_list
    #+end_src

*** get_macro_name_list

    #+begin_src python
    def get_macro_name_list(sexp_list):
        macro_name_list = []
        for sexp in sexp_list:
            if not cons_p(sexp):
                pass
            elif car(sexp) == '+macro':
                body = cdr(sexp)
                macro_name = car(body)
                macro_name_list.append(macro_name)
        return macro_name_list
    #+end_src

*** compile_module

    #+begin_src python
    def compile_module(module_name, sexp_list):
        module = types.ModuleType(module_name)
        setattr(module, 'jojo_name_list',
                get_jojo_name_list(sexp_list))
        setattr(module, 'macro_name_list',
                get_macro_name_list(sexp_list))
        setattr(module, 'imported_module_dict', {})
        for sexp in sexp_list:
            if cons_p(sexp):
                top_level_keyword = car(sexp)
                fun = top_level_keyword_dict[top_level_keyword]
                fun(module, cdr(sexp))
        return module
    #+end_src

*** compile_jo_list

    #+begin_src python
    def compile_jo_list(module, body):
        jo_list = []
        sexp_list = body
        while not null_p(sexp_list):
            sexp = car(sexp_list)
            jo_list.extend(sexp_emit(module, sexp))
            sexp_list = cdr(sexp_list)
        return jo_list
    #+end_src

*** sexp_emit

***** sexp_emit

      #+begin_src python
      def sexp_emit(module, sexp):
          if null_p(sexp):
              return null_emit(module, sexp)
          elif cons_p(sexp):
              return cons_emit(module, sexp)
          else:
              return symbol_emit(module, sexp)
      #+end_src

***** null_emit

      #+begin_src python
      def null_emit(module, sexp):
          return [null]
      #+end_src

***** cons_emit

      #+begin_src python
      def cons_emit(module, cons):
          keyword = car(cons)
          if keyword in keyword_dict.keys():
              fun = keyword_dict[keyword]
              return fun(module, cdr(cons))
          else:
              print("- cons_emit fail")
              print("  meet unknown keyword : {}".format(keyword))
      #+end_src

***** symbol_emit

******* symbol_emit

        #+begin_src python
        def symbol_emit(module, symbol):

            if int_symbol_p(symbol):
                return [int(symbol)]

            if string_symbol_p(symbol):
                string = symbol[1:len(symbol)-1]
                return [string]

            if local_symbol_p(symbol):
                return [GET(symbol)]
            if set_local_symbol_p(symbol):
                symbol = symbol[:len(symbol)-1]
                print ("hereherehere")
                return [SET(symbol)]

            if message_symbol_p(symbol):
                symbol = symbol[1:len(symbol)]
                return [MSG(symbol)]

            if symbol == 'apply':
                return [APPLY]
            if symbol == 'ifte':
                return [IFTE]
            if symbol == 'new':
                return [NEW]

            jojo_name_list = getattr(module, 'jojo_name_list')
            if symbol in jojo_name_list:
                return [CALL(module, symbol)]

            imported_module_dict = getattr(module, 'imported_module_dict')
            if symbol in imported_module_dict.keys():
                imported_module = imported_module_dict[symbol]
                return [imported_module]

            if symbol in prim_dict.keys():
                return [prim_dict[symbol]]

            print ("- symbol_emit fail")
            print ("  meet undefined symbol : {}".format(symbol))
        #+end_src

******* int_symbol_p

        #+begin_src python
        def int_symbol_p(symbol):
            p = re.compile(r"-?[0-9]+\Z")
            if p.match(symbol):
                return True
            else:
                return False
        #+end_src

******* string_symbol_p

        #+begin_src python
        def string_symbol_p(symbol):
            if len(symbol) <= 2:
                return False
            elif symbol[0] != '"':
                return False
            elif symbol[len(symbol)-1] != '"':
                return False
            else:
                return True
        #+end_src

******* local_symbol_p

        #+begin_src python
        def local_symbol_p(symbol):
            if len(symbol) <= 1:
                return False
            if symbol[0] != ':':
                return False
            if symbol[len(symbol)-1] == '!':
                return False
            else:
                return True
        #+end_src

******* set_local_symbol_p

        #+begin_src python
        def set_local_symbol_p(symbol):
            if len(symbol) <= 2:
                return False
            if symbol[0] != ':':
                return False
            if symbol[len(symbol)-1] != '!':
                return False
            else:
                return True
        #+end_src

******* message_symbol_p

        #+begin_src python
        def message_symbol_p(symbol):
            p = re.compile(r"\.\S+\Z")
            if p.match(symbol):
                return True
            else:
                return False
        #+end_src

* top level keywords

*** [note]

    - top_level_keyword : (-> module, body -- [effect module])

*** top_level_keyword_dict

    #+begin_src python
    top_level_keyword_dict = {}
    #+end_src

*** @top_level_keyword

    #+begin_src python
    def top_level_keyword(name):
        def decorator(fun):
            top_level_keyword_dict[name] = fun
            return fun
        return decorator
    #+end_src

*** import

    #+begin_src python
    @top_level_keyword("import")
    def k_import(module, body):
        module_name = car(body)
        imported_module = importlib.import_module(module_name)
        imported_module_dict = getattr(module, 'imported_module_dict')
        imported_module_dict[module_name] = imported_module
    #+end_src

*** (+jojo)

    #+begin_src python
    @top_level_keyword("+jojo")
    def plus_jojo(module, body):
        jojo_name = car(body)
        setattr(module, jojo_name, JOJO(compile_jo_list(module, cdr(body))))
    #+end_src

*** (+macro)

    #+begin_src python
    @top_level_keyword("+macro")
    def plus_macro(module, body):
        jojo_name = car(body)
        setattr(module, jojo_name, MACRO(compile_jo_list(module, cdr(body))))
    #+end_src

* keywords

*** [note]

    - keyword : (-> module, body -- jo list)

*** keyword_dict

    #+begin_src python
    keyword_dict = {}
    #+end_src

*** @keyword

    #+begin_src python
    def keyword(name):
        def decorator(fun):
            keyword_dict[name] = fun
            return fun
        return decorator
    #+end_src

*** (begin)

    #+begin_src python
    @keyword('begin')
    def k_begin(module, body):
        return compile_jo_list(module, body)
    #+end_src

*** (clo)

    #+begin_src python
    @keyword('clo')
    def k_clo(module, body):
        return [CLO(compile_jo_list(module, body))]
    #+end_src

*** (if)

    #+begin_src python
    @keyword('if')
    def k_if(module, body):
        jo_list = compile_jo_list(module, body)
        jo_list.append(IFTE)
        return jo_list
    #+end_src

*** (quote)

    #+begin_src python
    @keyword('quote')
    def k_quote(module, body):
        jo_list = list_to_stack(body)
        return jo_list
    #+end_src

*** >< (partquote)

*** >< (@)

* prim_dict

*** prim_dict

    #+begin_src python
    prim_dict = {}
    #+end_src

*** @prim

    #+begin_src python
    def prim(name):
        def decorator(fun):
            prim_dict[name] = fun
            return fun
        return decorator
    #+end_src

*** stack operation

    #+begin_src python
    @prim('drop')
    def drop(a):
        return ()

    @prim('dup')
    def dup(a):
        return (a, a)

    @prim('over')
    def over(a, b):
        return (a, b, a)

    @prim('tuck')
    def tuck(a, b):
        return (b, a, b)

    @prim('swap')
    def swap(a, b):
        return (b, a)
    #+end_src

*** number

    #+begin_src python
    @prim('add')
    def add(a, b):
        return a + b

    @prim('sub')
    def add(a, b):
        return a - b
    #+end_src

*** equivalence

    #+begin_src python
    @prim('equal?')
    def equal_p(a, b):
        return a == b

    @prim('eq?')
    def eq_p(a, b):
        return a is b
    #+end_src

*** list

    #+begin_src python
    prim('null')(null)
    prim('null?')(null_p)

    prim('cons')(cons)
    prim('cons?')(cons_p)

    prim('list?')(list_p)

    prim('car')(car)
    prim('cdr')(cdr)
    #+end_src

*** >< stack

    #+begin_src python

    #+end_src
