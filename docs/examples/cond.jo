(+jojo a-list
  1 2 3 4 null
  cons cons cons cons)

(+jojo list-length :list!
  :list null? {0}
  {:list .cdr list-length 1 add}
  ifte)

(+jojo a-length
  a-list list-length)

(note

 (+macro cond :body!
   :body :body cond-recur)

  (+jojo cond-recur :rest! :body!
    :rest list-length 2 eq?
    {:rest .car :rest .cdr .car }
    {:rest .car :rest .cdr .car

     :body :rest .cdr .cdr cond-recur
     }
    ifte))

(note
  (+jojo cond/expend (-> :body -- sexp)
    (cond
      [:body list-length 2 eq?]
      [:body .car :body .cdr .car cond/expend-if-then
       'else tail-cons
       'cond/miss-match-report tail-cons
       'debug tail-cons]
      else
      [:body .car :body .cdr .car cond/expend-if-then
       'else tail-cons
       :body .cdr .cdr recur tail-cons])))

(note
  (cond q1 a1
        q2 a2
        else af)
  ==>
  (begin
    q1 (clo a1)
    (clo
     (begin
       q2 (clo a2)
       (clo af)
       ifte))
    ifte))

(note
  (cond q1 a1
        q2 a2)
  ==>
  (begin
    q1 (clo a1)
    (clo
     (begin
       q2 (clo a2)
       (clo
        :body cond-mismatch)
       ifte))
    ifte))
