#+property: tangle core.jo
#+title: core

* [todo-stack]

*** (case) over class and data

* Int

  #+begin_src jojo
  (+jojo even? 2 mod 0 eq?)
  (+jojo odd? even? not)
  #+end_src

* List

*** List

    #+begin_src jojo
    (+union List
      <null>
      <cons>)
    #+end_src

*** list-length

    #+begin_src jojo
    (+jojo list-length (-> :list -- Int)
      (cond [:list null?] 0
            else [:list .cdr list-length inc]))
    #+end_src

*** list-ref

    #+begin_src jojo
    (+jojo list-ref (-> :list :index -- Value)
      (cond [:list null?]
            ["- list-ref fail"
             string-print newline
             "  index greater then length of list"
             string-print newline
             error]
            [:index 0 eq?] [:list .car]
            else [:list .cdr :index dec list-ref]))
    #+end_src

*** list-append

    #+begin_src jojo
    (+jojo list-append (-> :ante :succ -> List)
      (cond
        [:ante null?] [:succ]
        [:ante cons?] [:ante .cdr :succ list-append
                       :ante .car swap cons]))
    #+end_src

*** tail-cons

    #+begin_src jojo
    (+jojo tail-cons null cons list-append)
    #+end_src

* testing

*** (assert) & (assert!)

    #+begin_src jojo
    (+jojo assert (-> :body -- sexp)
      `(if (@ :body list-spread)
         {}
         {"- (assert) fail" string-print newline
          "  assertion : " string-print
          (quote (@ :body)) sexp-list-print newline}))

    (+jojo assert! (-> :body -- sexp)
      `(if (@ :body list-spread)
         {}
         {"- (assert!) fail" string-print newline
          "  assertion : " string-print
          (quote (@ :body)) sexp-list-print newline
          error}))
    #+end_src

* p -- gene

*** gene

    #+begin_src jojo
    (+gene p (-> :x --) :x print)
    #+end_src

*** List

    #+begin_src jojo
    (+disp p (-> :list List --)
      (cond [:list null?] ["()" p]
            [:list cons?] ["(" p :list list-print/loop ")" p]))

    (+jojo list-print/loop (-> :list --)
      (cond
        [:list null?] []
        [:list .cdr null?] [:list .car p]
        else [:list .car p space
              :list .cdr list-print/loop]))
    #+end_src

* equal? -- gene

*** gene

    #+begin_src jojo
    (+gene equal? (-> :x :y -- Bool) false)
    #+end_src

* combinator

*** times

    #+begin_src jojo
    (+jojo times (-> :fun :n --)
      (cond [:n 0 lteq?] []
            else [:fun apply
                  :fun :n dec times]))
    #+end_src
